### 2021-2 Martí

begin pregunta-|-c-|-
([2021-2] - Martí Q4P4)
¿Qué tipos de recursión se tiene en el siguiente código?:
    (define maximo
        (lambda (lista)
            (let masGrande ((l lista) (mayor 0))
                (cond ((= (length l) 1) (car l))
                    ((> mayor (car l)) (masGrande (cdr l) mayor))
                    (else (masGrande (cdr l) (car l)))))))

a. Recursión directa, de árbol, no de cola.
b. Recursión no directa, lineal, no de cola.
c. Recursión directa, lineal, de cola.
d. Recursión no directa, de árbol, de cola.

end pregunta

begin pregunta-|-d-|-
([2021-2] - Martí Q4P6)
En relación a las listas en Scheme es falso que:

a. Las funciones first y rest se utilizan para obtener el primer elemento y una lista con el resto de los elementos
respectivamente.
b. Las listas pueden contener elementos de cualquier tipo.
c. Una función se escribe como una lista, donde el primer elemento es la función y los
siguientes los parámetros.
d. Para que una lista sea evaluada, necesariamente, se debe considerar el uso de las funciones map o eval.

end pregunta

begin pregunta-|-c-|-
([2021-2] - Martí Q4P15)
¿Cuál de las siguientes funciones siempre usará la cantidad mínima de memoria en el stack?:

a. (define factorizacion
        (lambda (n)
            (let fact ((n n) (i 2))
                (cond ((> i n) '())
                    ((integer? (/ n i)) (cons i (fact (/ n i) i)))
                    (else (fact n (+ i 1)))))))

b. (define remove
        (lambda (x ls)
            (cond ((null? ls) ‘())
                ((eqv? x (car ls)) (remove x (cdr ls)))
                (else (cons (car ls) (remove x (cdr ls)))))))

c.(define fibonacci
        (lambda (n)
            (if (= n 0)
            0
            (let fib ((i n) (a1 1) (a0 0))
                (if (= i 1)
                a1
                (fib (- i 1) (+ a1 a0) a1))))))

d. Todas las alternativas.
end pregunta

### 2022-1 Rodrigo Salas

begin pregunta-|-b-|-
([2022-1] - Salas Q4P1)
Dado el siguiente código, indique cuál es la salida:
    (let ([x 2] [y 3]) (if (> x y)
    (display "hola")
    (if (>(* y 2)(+ x 3))
        (display "chao")
    #f)))
a. hola
b. chao
c. #F
d. Ninguna de las anteriores.
end pregunta

begin pregunta-|-x-|- No sabemos cual es la verdadera expresion
([2022-1] - Salas Q4P2)
¿Cuál es el resultado de la siguiente expresión?:
    (display (* (+ (+ 4 ((*2 1)(/6 2))(-1(+(- 1 5)(* 2 5)))))))
a. 45.
b. 54.
c. 9.
d. 10.
end pregunta

begin pregunta-|-e-|-
([2022-1] - Salas Q4P3)
Dada la siguiente ecuación matemática, cuál sería el código correcto para realizar el cálculo?
    (4 + (5 * ((6/2)-5))) - 2

a. (-(-4(* 5 (+(/ 6 2) 5))) 2)
b. (+(+ 4(* 5 (+ (/ 6 2) - 5))) -2)
c. (+(- 4(5 * (+ (/ 6 2) 5))) (- 0 2))
d. (-(+ 4 (* 5 (- (/ 2 6) 5))) 2)
e. Ninguna de las anteriores.
end pregunta

begin pregunta-|-d-|-
([2022-1] - Salas Q4P4)
¿Cuál es el resultado de la siguiente expresión?
    (display (let ([list1 '(a b c)] [list 2(d e f)])
        (cons (cons (car list1)
            (car list2)
        (cons (car (cdr list1))
            (car (cdr list2)))))))

a. ((a.d) b.e)
b. (a d b e)
c. ((a.d).(b c e f))
d. (a b c d e f)
e. Ninguna de las anteriores.
end pregunta

begin pregunta-|-c-|-
([2022-1] - Salas Q4P5)
¿Cuál es el resultado de la siguiente expresión?
    (display (let ([x '((ab) c)])
        (cons (let ([x (cdr x)])
            (car x))
        (let ([x (car x)])
            (cons (let ([x (cdr x)])
                (car x))
            (cons (let ([x (car x)])
                x)
                (cdr x)))))))

a. ((a b) c)
b. a 
c. (b c b a)
d. (c b a b)
e. Ninguna de las anteriores.
end pregunta

begin pregunta-|-d-|-
([2022-1] - Salas Q4P6)
6. ¿Cuál es el resultado de la siguiente expresión?
    (define neg-relu 
        (lambda (x)
            ((if (>= x 0) * -)
                0
                x)))
    (display (cons (neg-relu -10)(neg-relu 10)))

a. (10.-10)
b. (-10.10)
c. (0.10)
d. (10.0)
e. Ninguna de las anteriores.

end pregunta

begin pregunta-|-d-|-
([2022-1] - Salas Q4P7)
¿Cuál es el resultado de la siguiente expresión?
    (define funcion 
        (lambda (n)
            (cond [(not (number? n)) "no es numero"]
                [(= n 0) "infinito]
                [#t(/ 1 n)])))
    (display (map funcion '(0 3/2 a)))

a. (infinito #t no es numero)
b. 2/3
c. (no es numero no es numero infinito)
d. (infinito 2/3 no es numero)
e. Ninguna de las anteriores.
end pregunta

begin pregunta-|-c-|-
([2022-1] - Salas Q4P8)
¿Cuál es el resultado de la siguiente expresión?
    (define calcular (lambda (ls)
        (if (null? ls)
            1
            (+ (calcular (cdr ls)) (car ls)))))
    (display (calcular '(1 2 3 4 5)))

a. 5
b. 15
c. 16
d. 30
e. Ninguna de los anteriores.
end pregunta

begin pregunta-|-d-|-
([2022-1] - Salas Q4P9)
La siguiente expresión:
    (define (hacer-algo lista)
        (let hacer ((lista lista)
            (variable 0))
        (if (null? lista)
            variable
            (hacer (cdr lista)
                (+ (car lista) variable)))))
    (display (hacer-algo '(1 2 3 4 5)))

a. Retorna 15 y es recursión simple.
b. Retorna 15 y es recursión de cola.
c. Retorna 5 y es recursión simple.
d. Retorna 15 y es recursión de cola.
e. Ninguna de los anteriores.
end pregunta

begin pregunta-|-d-|-
([2022-1] - Salas Q4P10)
¿Cuál es el resultado de la siguiente expresión?
    (define tic (let p ([x 1])
        (delay (cons x (p (+ x 1))))))
    (display (car (force (cdr (force tic)))))

a. 0
b. 1
c. 2
d. tic
e. (tic tic)
f. Ninguna de las anteriores.
end pregunta


### 2022-1 Martí

begin pregunta-|-b-|-
([2022-1] - Martí Q4P1)
Una de las siguientes frases sobre la Programación Funcional y/o Scheme no es cierta:
a. La programación funcional pura no usa variables ni asignación.
b. En la programación funcional, la evaluación de las funciones está controlada por secuencias e iteraciones.
c. En Scheme, las funciones son entidades de primera clase.
d. Scheme tiene recolección automática de basura.
end pregunta

begin pregunta-|-d-|-
([2022-1] - Martí Q4P2)
¿Cual de las siguientes expresiones lambda no entrega el resultado asociado?
a. ((lambda (x y z) (+ x y z)) 3 4 5) --> resultado: 12
b. ((lambda (x.y) (list x y)) 3 4) --> resultado: (3 (4))
c. ((lambda x x) 3 4) --> resultado: (3 4)
d. ((lambda (x y) (- xy)) (3 4)) --> resultado: (-1)
end pregunta

begin pregunta-|-b-|-
([2022-1] - Martí Q4P3)
¿Qué tipos de recursión se tiene en el siguiente código?
    (define maximo
        (lambda (lista)
            (let masGrande ((l lista) (mayot 0))
                (cond ((= (length l) 1) (car l))
                    ((> mayor (car l)) (masGrande (cdr l) mayor))
                    (else (masGrande (cdr l) (car l)))))))

a. Recursión directa, de árbol, no de cola.
b. Recursión directa, lineal, de cola.
c. Recursión no directa, lineal, no de cola.
d. Recursión no directa, de árbol, de cola.
end pregunta

begin pregunta-|-a-|-
([2022-1] - Martí Q4P4)
¿Cuál es la salida que entrega la ejecución de los siguientes códigos?
    (let ((x 3) (y 2) (z 1))
        (let* ((x y) (z x) (y z))
            (list x y z)))

    (let ((x 3) (y 2) (z 1))
        (let ((x y) (z x) (y z))
            (list x y z)))

a. (2 2 2) | (2 1 3)
b. (3 3 3) | (2 1 3)
c. (2 1 3) | (2 2 2)
d. (2 1 3) | (3 3 3)
end pregunta

begin pregunta-|-b-|-
([2022-1] - Martí Q4P5)
¿Cuál de las siguientes funciones usará la menor cantidad de memoria en el stack?

a. (define memv (lambda (x ls)
    (cond ((null? ls ())
        ((eqv? x (car ls)) (cdr ls))
            (else (list (memv x (cdr ls))))))))

b. (define factorial (lambda (n)
    (let fact ((i n) (a 1))
        (if (= i 0)
            a
            (fact (-i 1) (* a i))))))

c. (define fibonacci (lambda (n)
    (let fib ((i n))
        (cond ((= i 0) 0)
            ((= i 1) 1)
            (else (+ (fib (-i 1)) fib (-i 2)))))))

d. Todas usan la misma cantidad de memoria.
end pregunta

### 2022-1 Díaz 17°

begin pregunta-|-c-|-
([2022-1] - Díaz Q4P16)
En relación a lo visto sobre predicados en Scheme, se puede afirmar que:

a. Scheme no soporta expresiones relacionales como =, < y >.
b. el operador null? elimina todos los elementos de una lista.
c. Scheme soporta los operadores lógicos or, and y not.
d. number? verifica si un número es flotante.
end pregunta

# ¿?
begin pregunta-|-b-|-
([2022-1] - Díaz Q4P17)
Respecto a recursión de cola, es incorrecto decir que:

a. Es un tipo de recursión directa.
b. Debe necesariamente existir más de una invocación recursiva para ser llamada recursión en cola.
c. Corresponde a una recursión de cola cuando el llamado del procedimiento aparece al final de la expresión lambda.
d. Se puede hacer un número indefinido de llamadas de cola sin provocar overflow.
end pregunta

### 2022-2 Carmona

begin pregunta-|-b-|-
([2022-2] - Carmona Q4P11)
¿Cuál es el resultado del siguiente programa?
    (define sumar (lambda (x y) (+ x y)))
    (let ((x 2) (y 2))
        (let sumar ((x (sumar xy)) (y x))
            (+ x y)
        )
    )

a. 5
b. 6
c. 7
d. Error en tiempo de ejecución.
end pregunta

begin pregunta-|-c-|-
([2022-2] - Carmona Q4P12)
¿Cuáles de los siguientes principios no corresponde a la Programación Funcional?

a. Se debe asegurar la transparencia referencial.
b. Las funciones son elementos de primer orden en el lenguaje.
c. Las funciones pueden ser puras.
d. Programar considerando objetos inmutables.
end pregunta

begin pregunta-|-d-|-
([2022-2] - Carmona Q4P13)
El siguiente código corresponde a un lenguaje desconocido. ¿Qué línea le indica que no es funcional y por qué?

    d =
        [x, y] =>
            {x - y}
    
    f =
        [x, y] =>
            {x + y}
    
    f(d(1, 1), d (2, 3))

a. La línea 3 y 6, porque no usa la notación prefija.
b. La línea 1 y 4, porque tiene asignaciones directas con el símbolo =
c. La línea 8, porque las funciones no son puras.
d. Ninguna línea puede indicar que el paradigma no es funcional.
end pregunta

begin pregunta-|-c-|-
([2022-2] - Carmona Q4P14)
En relación a las listas de Scheme es falso que:

a. Las listas contemplan elementos de cualquier tipo.
b. Una función se escribe como una lista donde el primer elemento es la función y los siguientes los parámetros.
c. Para que una lista sea evaluada se le antecede con una citación simple.
d. Las funciones first y rest se utilizan para obtener el primer elemento y una lista con el resto de los elementos respectivamente.
end pregunta

### 2022-2 Martí

begin pregunta-|-d-|-
([2022-2] - Martí Q4P11)
¿Cuál es el resultado de evaluar las siguientes dos expresiones?
    (define e '((a 1) (b 2) (c 3)))
    (first (rest (assoc 'a e)))

a. (a 1)
b. (1)
c. ()
d. 1
end pregunta

begin pregunta-|-a-|-
([2022-2] - Martí Q4P12)
Al intentar ejecutar las siguientes dos expresiones:
    (apply min '(1 3 5 5 -1 3 5))
    (min 1 3 5 5 -1 3 5)
Se obtiene:

a. El mismo valor para ambas.
b. Solo se puede ejecutar la expresión apply.
c. Solo se puede ejecutar la expresión min.
d. Ninguna se puede ejecutar.
end pregunta

begin pregunta-|-b-|-
([2022-2] - Martí Q4P13)
La ejecución de la siguiente expresión:
    (map (lambda (x y) (sqrt (+(* x x)(* y y))))
        '(3 5 8)
        '(4 12 15))
entrega como resultado:

a. ((5) (13) (17))
b. (5 13 17)
c. Un error, dado que solo puede tener sublistas de largo 2 para ligar a x e y.
d. Un error, dado que no es posible mapear una expresión lambda a un código.
end pregunta

begin pregunta-|-c-|-
([2022-2] - Martí Q4P14)
¿Cuál de las siguientes expresiones no entregará una lista vacía en su ejecución?

a. (filter pair? '(1 2 3 4 5 6))
b. (filter zero? '(1 2 3 4 5 6))
c. (filter odd? '(1 2 3 4 5 6))
d. (filter null? '(1 2 3 4 5 6))
end pregunta

begin pregunta-|-d-|-
([2022-2] - Martí Q4P15)
¿Cuál es el objetivo de la evaluación perezosa?

a. Potenciar la recursión de cola.
b. Poner un límite al espacio de memoria en stack a utilizar.
c. Poner un límite al espacio de memoria en heap a utilizar.
d. Ahorrar computación.
end pregunta

### 2022-2 Díaz

begin pregunta-|-c-|-
([2022-2] - Díaz Q4P11)
En relación a las listas en Scheme es falso que:

a. Las listas contemplan elementos de cualquier tipo.
b. Una función se escribe como una lista donde el primer elemento es la función y los siguientes los parámetros.
c. Para que una lista sea evaluada se le antecede con una citación simple.
d. Las funciones car y cdr se utilizan para obtener el primer elemento y una lista sin el primer elemento respectivamente.
end pregunta

begin pregunta-|-a-|-
([2022-2] - Martí Q4P12)
¿Cuál es el resultado de evaluar la siguiente expresión en Scheme?
    (list 1 2 (list 3 (cons 4 (list 5 6))) (list 7 (cons 8 '()) 9) 0)

a. (1 2 (3 ( 4 5 6)) (7 (8) 9) 0)
b. (1 2 (3 (4 (5 6))) (7 (8 '()) 9) 0)
c. (1 2 (3 4 (5 6)) (7 (8) 9 ) 0)
d. (1 2 3 (4 5 6) 7 (8) 9 0)
end pregunta

begin pregunta-|-d-|-
([2022-2] - Martí Q4P13)
Sobre recursión en Scheme es falso que:

a. Un procedimiento recursivo es aquel que se llama a sí mismo.
b. Recursión de cola es cuando un procedimiento hace un llamado de cola hacia sí mismo.
c. Se puede hacer un número indefinido de llamados de recursión de cola sin causar overflow del stack.
d. Una función no puede poseer recursión de cola a la vez que otro tipo.
end pregunta

begin pregunta-|-b-|-
([2022-2] - Martí Q4P14)
Scheme no es un lenguaje funcional puro. Esto se debe a que:

a. Permite la definición y asignación de variables por medio de let y define.
b. Es posible programar con efectos laterales al asignar valores a variables con set!
c. Las funciones son entidades de primera clase y se tratan como cualquier valor.
d. A diferencia de LISP, los nombres tienen ámbito estático.
end pregunta

begin pregunta-|-b-|-
([2022-2] - Martí Q4P15)
Considere la función combinatoria definida a continuación:
    (define (combinatoria n k)
        (cond [(or (= n k) (= k 0)) 1]
            [else (+ (combinatoria (- n 1) (- k 1))
                (combinatoria n (- k 1))
            )]))

Sobre esta función es correcto decir que:

a. Es recursiva lineal y los llamados no son de cola.
b. Al menos uno de los llamados recursivos no es de cola.
c. Ambos llamados recursivos son de cola.
d. Sin contar llamadas a otras funciones, hace uso de una sola instancia de registro de activación.
end pregunta

### 2023-2 Martí

begin pregunta-|-c-|-
([2023-2] - Martí Q4P11)
Dada la siguiente expresión: (define e '((a 1) (b 2) (c 3))), y la consulta (assq 'b e), ¿Cuál es el resultado correcto?

a. true
b. ((b 2) (c 3))
c. (b 2)
d. Ninguna de las anteriores.
end pregunta

begin pregunta-|-a-|-
([2023-2] - Martí Q4P12)
¿Cuál es el resultado de ejecutar: (apply min 5 1 3 (5 -1 3 5))?

a. Hay un error en la expresión.
b. true
c. -1
d. Ninguna de las anteriores.
end pregunta

begin pregunta-|-b-|-
([2023-2] - Martí Q4P13)
¿Por qué no se puede ejecutar el siguiente código?
    (map (lambda (x y) (sqrt (+(* x x)(* y y))))
        '(3 4 5 12))

a. Porque la expresión lambda no tiene nombre (debió estar dentro de un let).
b. Porque se requieren dos listas de igual longitud, una para ligar valores a x y otra para y.
c. Porque estar dentro de un define y der ejecutada en una expresión aparte (con let, probablemente).
d. Todas las anteriores.
end pregunta

begin pregunta-|-d-|-
([2023-2] - Martí Q4P14)
¿Cuál es el resultado de ejecutar: (filter odd? '(1 2 3 4 5 6))?

a. Error.
b. No existe odd? en Scheme.
c. 1 3 5
d. (1 3 5)
end pregunta

begin pregunta-|-c-|-
([2023-2] - Martí Q4P15)
¿Cuál es el resultado de evaluar la siguiente expresión en Scheme?
    (append '(1 2)(list 3 (cons 4 (list 5 6)))(list 7 8 9))

a. (1 2 (3 4 (5 6)) 7 8 9)
b. (1 2 3 (4 5 6) (7 8 9))
c. (1 2 3 (4 5 6) 7 8 9)
d. (1 2 3 4 5 6 7 8 9)
end pregunta

begin pregunta -|-c-|-

([2024-2] - Jose Luis Marti. Q4P11)
En la programacion funcional pura, valga la redundancia, las funciones deben ser puras, es decir:
a. Deben hacer uso de la recursion, en cualquiera de sus tipos.
b. Tienen que considerar una composicion de dos o mas funciones.
c. Siempre deben devolver las mismas salidas para las mismas entradas y no tener efectos secundarios
d. Deben considerar objetos inmutables, es decir, objetos que no cambian de estado.
([2024-2] - Jose Luis Marti. Q4P11)

end pregunta
begin pregunta -|-c-|-

([2024-2] - Jose Luis Marti. Q4P12)
Cual de las siguientes consultas en Scheme fallara?
a. (list)
b. (list '())
c. (list '() a)
d. Ninguna

end pregunta
begin pregunta -|-a-|-

([2024-2] - Jose Luis Marti. Q4P13)
Cual de los siguientes operadores de Scheme se acerca a la logica de un lenguaje imperativo?
a. let*
b. aplly
c. map
d. assoc

end alt 
begin pregunta -|-b-|-

Cual es el resultado de la ejecucion del siguiente codigo?
(define a (lambda (x) (b x)))
(define b (lambda (y) (+ y y)))
(a 4)

a. 4
b. 8
c. 16
d. Error

end alt
begin alt -|-d-|-

([2024-2] - Jose Luis Marti. Q4P15) 
Cual de las siguientes definiciones es incorrecta?
a. El operador let se recomeienda cuando no importa el orden de evaluacion de las operaciones, o sea, no hay dependencia
b. El operador let* se recomienda cuando hay una dependiencia lineal entre los valores de las operaciones asociadas
c. El operador letrec se recomienda cuando hay una dependencia circular entre las operaciones
d. Ninguna de las anteriores

end alt