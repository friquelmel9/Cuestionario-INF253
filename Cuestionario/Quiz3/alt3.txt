begin pregunta -|-c-|- Solo se llama al constructor respectivo

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere la figura 1:
figura:1
Si se realiza el siguiente codigo:
    SuperClase sup2 = new SuperClase(0);
¿Que constructores y en que orden se llamaran?
a. SuperClase()
b. SuperClase() -> SuperClase(int i)
c. SuperClase(int i)
d. Ninguna de las anteriores

end pregunta
begin pregunta-|-a-|-

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere las figuras 1 y 2:
figura:1
figura:2
Si se realiza el siguiente codigo:
    SubClase sub1 = new SubClase()
¿Que constructores y en que orden se llamaran?
a. SuperClase() -> SubClase()
b. SubClase()
c. SuperClase()
d. Ninguna de las anteriores

end pregunta
begin pregunta-|-b-|-

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere las figuras 1 y 2:
figura:1
figura:2
Si se realiza el siguiente codigo:
    SubClase sub2 = new SubClase(0)
¿Que constructores y en que orden se llamaran?
a. SuperClase() -> SubClase() -> SubClase(int i)
b. SuperClase() -> SubClase(int i)
c. SuperClase(int i) -> SubClase(int i) 
d. Ninguna de las anteriores

end pregunta
begin pregunta-|-b-|-

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere las figuras 1 y 2:
figura:1
figura:2
Si se realiza el siguiente codigo:
    SubClase sub1 = new SubClase()
    System.out.println(sub1.Suma());
¿Que sera lo que se vera por pantalla?
a. "2"
b. "4"
c. "6"
d. No se mostrara nada por pantalla o habra error

end pregunta
begin pregunta-|-b-|-

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere las figuras 1 y 2:
figura:1
figura:2
Si se realiza el siguiente codigo:
    SuperClase sub3 = new Subclase();
    System.out.println(sub3.Suma());
Que sera lo que se vera por pantalla?
a. "2"
b. "4"
c. "6"
d. No se mostrara nada por pantalla o habra error

end pregunta
begin pregunta-|-b-|-

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere las figuras 1 y 2:
figura:1
figura:2
Si se realiza el siguiente codigo:
    SubClase sub1 = new SubClase();
    System.out.println(sub1.nombre);
Que sera lo que se vera por pantalla?
a. "SuperClase"
b. "SubClase"
c. "SubSubClase"
d. No se mostrara nada por pantalla o habra error

end pregunta
begin pregunta-|-d-|-

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere las figuras 1 y 2:
figura:1
figura:2
Si se realiza el siguiente codigo:
    SuperClase sub3 = new SubClase();
    System.out.println(sub3.superSuma());
Que sera lo que se vera por pantalla?
a. "2"
b. "4"
c. "8"
d. No se mostrara nada por pantalla o habra error

end pregunta
begin pregunta-|-c-|-

(Ejemplo visto en clases 2024-2, W. Ormazábal)
Considere las figuras 1 y 2:
figura:1
figura:2
Si se realiza el siguiente codigo:
    SubClase sub1 = new SubClase();
    System.out.println(sub1.superSuma());
Que sera lo que se vera por pantalla?
a. "2"
b. "4"
c. "8"
d. No se mostrara nada por pantalla o habra error

end pregunta
begin alt -|-a-|-

([2024-2] - Jose Luis Marti. Q3P1)
Al usar el operador new, cual de las siguientes acciones no se llevan a cabo?
a. Lanza una excepcion para activar el runtime
b. El runtime crea un objeto
c. Se asigna suficiente memoria en el heap
d. Se invoca un constructor para inicializar un objeto

end alt
begin alt -|-b-|-

([2024-2] - Jose Luis Marti. Q3P2)
Cual de los siguientes operadores o funcionalidades no esta bien definido?

a. super: para acceder a un atributo de la superclase cuando el modificador de acceso lo permita
b. Modificador de acceso protected, que permite a un objeto de una clase, por ejemplo, acceder directamente a un atributo definido en otro paquete
c. Ligado dinamico de metodos: Variable del tipo base que pueden referenciar objetos de alguna clase descendiente, y asi ejectuar el metodo redefinido es esta
d. this: permite pasar una referencia del objeto actual como parametro a otro metodo.

end alt
begin alt -|-b-|-

([2024-2] - Jose Luis Marti. Q3P3)
Cual de las siguientes formas de polimorfismo no se encuentran en Java?
a. Sobrecarga de metodos
b. Punteros a void
c. Clases genericas
d. Ligado dinamico de metodos

end alt
begin alt -|-c-|-

([2024-2] - Jose Luis Marti. Q3P4)

En relación al uso de la memoria para implantar la herencia, es necesario el heap porque:
a La sobrecarga de métodos hace variaciones en el código que no se pueden guardar en el stack.
b El tamaño de las referencias mismas puede cambiar dependiendo de la clase del objeto a la que se haga alusión.
c El que una referencia a una clase pueda ser reemplazada constantemente por otra a una subclase, conlleva el acceso a objetos de tamaño variable, lo que no es manejable directamente en el stack.
d Las continuas invocaciones a métodos pueden afectar el rendimiento si los registros de activación se crearan en el stack, en lugar del heap.

end alt
begin alt -|-d-|-

([2024-2] - Jose Luis Marti. Q3P5)

En relación a la redefinición de métodos dentro de una jerarquía de herencia, ¿cuál de las siguientes afirmaciones es la única verdadera?
a. Los métodos de la superclase y subclase sólo pueden diferir en el tipo de retorno.
b. Se puede invocar el método redefinido desde la subclase con la referencia this.
c. Un método final de la superclase se puede redefinir por última vez en la subclase que la extiende.
d. Un método redefinido puede tener modificadores de acceso, pero sólo puede entregar mayor acceso, no restringirlo.

end alt