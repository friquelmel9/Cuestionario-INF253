## Ejercicios de clases

begin alt|a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (+ 0.5+0.i 1/2)
Que sera lo que retornara?
a. 1.0 
b. 1
c. 1.0+0i
d. Dara error

end alt
begin alt|c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (+ 1/2 0.5+0.i)
Que sera lo que retornara?
a. 1.0 
b. 1
c. 1.0+0i
d. Dara error

end alt
begin alt|a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (+ 0.5 5e-1)
Que sera lo que retornara?
a. 1.0 
b. 1e0
c. 1
d. Dara error

end alt

## Operaciones sobre listas, ejemplo2.scm
### Operaciones cons

begin alt|b|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cons '(a b c) '(1 2))
Que sera lo que retornara?
a. ((a b c).(1 2))
b. ((a b c) 1 2)
c. (a b c 1 2)
d. Dara error

end alt
begin alt|a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cons '(a b c) '())
Que sera lo que retornara?
a. ((a b c))
b. (a b c)
c. ()
d. Dara error

end alt
begin alt|c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cons '() '(1 2))
Que sera lo que retornara?
a. (() (1 2)) 
b. (1 2)
c. (() 1 2)
d. Dara error

end alt
begin alt|b|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cons '() '())
Que sera lo que retornara?
a. (() ()) 
b. (())
c. ()
d. Dara error

end alt

### Operaciones list

begin alt|a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (list '(a b c) '(1 2))
Que sera lo que retornara?
a. ((a b c) (1 2))
b. ((a b c) 1 2)
c. (a b c 1 2)
d. (a b c (1 2))

end alt

begin alt|d|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (list '(a b c) '())
Que sera lo que retornara?
a. ((a b c))
b. (a b c)
c. (a b c ())
d. ((a b c) ())

end alt

begin alt|c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (list '() '(1 2))
Que sera lo que retornara?
a. (1 2)
b. (() 1 2)
c. (() (1 2))
d. ()

end alt

### Operaciones append

begin alt|c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (append '(a b c) '(1 2))
Que sera lo que retornara?
a. ((a b c).(1 2))
b. ((a b c) 1 2)
c. (a b c 1 2)
d. Dara error

end alt
begin alt|b|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (append '(a b c) '())
Que sera lo que retornara?
a. ((a b c))
b. (a b c)
c. (a b c ())
d. ((a b c) ())

end alt

## Tipos de listas

begin alt|d|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cdr '(a b))
Que sera lo que retornara?
a. a
b. b
c. (a)
d. (b)

end alt
begin alt |c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cdr '(b))
Que sera lo que retornara?
a. b
b. (b)
c. ()
d. Dara error

end alt
begin alt |b|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cdr '(a . b))
Que sera lo que retornara?
a. b
b. (b)
c. ()
d. Dara error

end alt

### Cons 

begin alt |a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cons 'a '(b))
Que sera lo que retornara?
a. (a b)
b. (a (b))
c. (a . b)
d. (a . (b))

end alt
begin alt |c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (cons 'a 'b)
Que sera lo que retornara?
a. (a b)
b. (a (b))
c. (a . b)
d. (a . (b))

end alt
begin alt |a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    ('(a b . ()))
Que sera lo que retornara?
a. (a b)
b. (a (b))
c. (a . b)
d. (a . (b))

end alt

# Ejemplos let ejemplo3.scm

begin alt |c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (let
        ((a 3))
        (* (+ a a) (+ a a))
    )
Cual seria el resultado que entregara?
a. 3
b. 9
c. 36
d. 81

end alt
begin alt |a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente comando en Scheme:
    (let
        ((- +))
        (- 1 1)
    )
Cual seria el resultado que entregara?
a. 2
b. 0
c. 1
d. Dara error, puesto que no podemos asignar este tipo de operaciones a otras

end alt

# Ejemplos lambda ejemplo4.scm

begin alt |c|

(Ejercicios de clases Wladimir 2024-2)
Considere los siguientes comandos en Scheme:
    (let ((x 1) (y 2)) (+ x y)) ; Funcion1
    ((lambda (x y) (+ x y)) 1 2) ; Funcion2
En relacion con estos, hemos de decir que:
    I. Ambos arrojaran el mismo resultado
    II. El comando eqv? retornara #f si usamos de argumentos ambas funciones
    III. Se puede decir que Funcion1 posee variables, mientras que la Funcion2 no
a. Solo I
b. I y II
c. I y III
d. Todas las anteriores

end alt
begin alt |a|

(Ejercicios de clases Wladimir 2024-2)
Considere los siguientes comandos en Scheme:
    ((lambda x (list x)) 1 2 3) ; Funcion1
    ((lambda (x y) (list x y)) 1 2 3) ; Funcion2 
Cual de los siguientes retornos es el correcto?
a. ((1 2 3)) | Error
b. ((1 2 3)) | ((1 2 3))
c. Error | '((1 2 3))
d. Error | Error

end alt
begin alt |b|

(Ejercicios de clases Wladimir 2024-2)
Considere los siguientes comandos en Scheme:
    (
    let (
            (duplicador (lambda (x) (* 2 x)))
        )
    (list   (duplicador 2)
            (duplicador 3)
            (duplicador 4))
    )
Que sera lo que retornara este let?
a. Error, puesto que el list esta llamando fuera del contexto del let
b. Retornara la lista '(4 6 8), puesto que se llaman individualmente y se unen en una lista
c. Retornara las listas '(4), '(6) y '(8), puesto que list crea una lista para cada resultado
d. Ninguna de las anteriores

end alt
begin alt |c| Note que al ser impropia los parametros en lambda2, considera x como el primer elemento recibido e y como todos los demas, uniendolos en una lista

(Ejercicios de clases Wladimir 2024-2)
Considere los siguientes codigos en Scheme:
    ((lambda (x y) (list x y)) 1 2 3) ; lambda1
    ((lambda (x . y) (list x y)) 1 2 3) ;lambda2
Que se puede decir sobre ambas funciones lambda?
a. Ninguna funcionara puesto que recibe 3 parametros cuando se piden 2.
b. Ambas retornaran la misma lista si se les entregara la cantidad de parametros correctos
c. Solo lambda2 es capaz de devolver un resultado, ya que lambda1 da error
d. Solo lambda1 es capaz de devolver un resultado, ya que lambda2 da error

end alt
begin alt |a|
(Ejercicios de clases Wladimir 2024-2)
Considere los siguientes codigos en Scheme:
    ((lambda (x y) (list x y)) 1 2) ; lambda1
    ((lambda (x . y) (list x y)) 1 2) ; lambda2
    ((lambda x (list x)) 1 2) ;  lambda3
Cuales seran los resultados de las funciones lambda? Considere el orden lambda1 / lambda2 / lambda3
a. (1 2) / (1 (2)) / ((1 2))
b. ((1) (2)) / (1 2) / ((1) (2))
c. (1 2) / (1 2) / ((1) (2))
d. (1 2) / (1 (2)) / (1 2)
e. ((1) (2)) / (1 (2)) / ((1 2))

end alt


# Ejemplos ejemplo6.scm
## Relacionales

begin alt |c|

(Ejercicios de clases Wladimir 2024-2)
Considere los siguientes comandos en Scheme:
    (define (length ls)
            (if (null? ls)
                0
                (+ 1 (length (cdr ls)))
            )
    )
Cual de las siguientes comandos son validos para el codigo (o sea, que no retornaran error)?
    I. (length '())
    II. (length '(1 2))
    III. (length '(1 . 2))
a. Solo I
b. Solo II
c. I y II
d. II y III 

end alt

# Ejemplo8.scm

begin alt |d|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (define lista '(a b c d e))
Cual de estas operaciones hara un cambio a la asignacion de lista?
    I. (assign lista '(a b))
    II. (cdr lista)
    III. (set! lista)
a. Solo I
b. Solo II
c. I y III
d. Solo III

end alt
begin alt |a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (+ x x) ;Linea1
    (define x 10) ;Linea2
    (+ x x) ;Linea3
Que se puede deducir sobre este codigo?
    I. Habra un error en la Linea1, al no definirse x previamente
    II. Si cambiamos Linea1 y Linea2, el resultado que nos dara la suma en la linea3 sera 30, mas no quedara asignado
    III. Si cambiamos Linea1 y Linea2, el x quedara asignado como 30.
a. Solo I
b. I y II
c. I y III
d. Ninguna de las anteriores

end alt
begin alt |d|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (define duplicador_2 (lambda (x) (duplicador x))) ;Linea1
    (duplicador_2 2) ;Linea2
    (define duplicador (lambda (x) (* 2 x))) ;Linea3
Que se puede deducir sobre este codigo?
    I. Habra un error en la linea1 ya que duplicador no esta definido
    II. Para que el codigo funcione, la Linea2 ha de estar antes de la Linea1
    III. Como duplicador esta dentro de duplicador2, solo se puede llamar si se llama a duplicador2
a. Solo I
b. I y II
c. I y III
d. Ninguna de las anteriores

end alt

# alcance de las asignaciones

begin alt |d|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (let ((x 1) (y 2));
        (let ((x y) (y x));
            (list x y)
        )
    )
El valor que retornara este let sera;
a. (1 2)
b. (1 1)
c. (2 2)
d. (2 1)

end alt
begin alt |c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (let ((x 1) (y 2));
        (let* ((x y) (y x));
            (list x y)
        )
    )
El valor que retornara este let sera;
a. (1 2)
b. (1 1)
c. (2 2)
d. (2 1)

end alt
begin alt |c| El problema es que let no deja que suma se defina previo  a la definicion del lambda

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (let ((suma (lambda (ls)
                    (if (null? ls)
                    0
                    (+ (car ls) (suma (cdr ls)))
                    )
                )
            ))
        (suma '(1 2 3 4 5 6))
    )
Que es cierto sobre este programa?
a. Se recibe una lista y se suma todos los numeros en orden. Retorna el numero
b. El programa se cae si recibe una lista vacia
c. El codigo no funciona debido a que suma no esta definido para el procedimiento
d. Ninguna de las anteriores

end alt
begin alt |a| Letrec si permite que suma se refiera a si misma dentro de la definicion

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (letrec ((suma (lambda (ls)
                    (if (null? ls)
                    0
                    (+ (car ls) (suma (cdr ls)))
                    )
                )
            ))
        (suma '(1 2 3 4 5 6))
    )
Que es cierto sobre este programa?
a. Se recibe una lista y se suma todos los numeros en orden. Retorna el numero
b. El programa se cae si recibe una lista vacia
c. El codigo no funciona debido a que suma no esta definido para el procedimiento
d. Ninguna de las anteriores

end alt
begin alt |d|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (letrec ((y (+ x 2)) 
            (x 1)
            )
    y)
Que es cierto sobre este programa?
a. El programa retorna la suma de y + 2
b. El programa utiliza variables que han de ser evaluadas de izquierda a derecha, ya que importa el orden de evaluacion
c. El programa no funciona, debido a que y no esta definido previamente
d. Ninguna de las anteriores

end alt
begin alt |a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (letrec ((f (lambda () (+ x 2)));
            (x 1)
            )
    (f)
    )
Que es cierto sobre este programa?
a. El programa retorna la suma de x + 2
b. El programa no devuelve nada puesto que no se llama a nada.
c. El programa no funciona, debido a que x no esta definido previamente
d. Ninguna de las anteriores

end alt

#ejemplo9.scm

begin alt |b|
(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (eq? '(a b c) '(a b c . ())) ; Retorno1
    (eqv? '(a b c) '(a b c . ())) ; retorno2
    (equal? '(a b c) '(a b c . ())) ; Retorno3
Que sera lo que retornara cada funcion? Considere el orden retorno1, retorno2 y retorno3
a. #t #f #t
b. #f #f #t
c. #t #t #f
d. #t #t #t

end alt
begin alt |c|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (apply + '(5 -1 3 5)) ;Linea1
    (+ 5 -1 3 5) ;Linea2
Cual de los siguientes procedimientos devolvera #t al tener de argumentos linea1 y linea2?
    I. (eq? (+ 5 -1 3 5) (apply + '(5 -1 3 5)))
    II. (eqv? (+ 5 -1 3 5) (apply + '(5 -1 3 5)))
    III. (equal? (+ 5 -1 3 5) (apply + '(5 -1 3 5)))
a. I y II
b. I y III
c. Todas las anteriores
d. Ninguna de las anteriores

end alt
begin alt |b| Notar que pese a que este escrito con enter, las listas son (1 2 -1) (0 2 -1) y (0 2 -1), el map evaluara por indice, o sea, x,y,z = 1,0,0 / 2,2,2 / -1,-1,-1 para cada caso

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (map (lambda (x y z) (+ y x z))
        '(1 2 -1)
        '(0 2 -1)
        '(0 2 -1)
    )
Cual sera el resultado que va a entregar?
a. (2 1 1)
b. (1 6 -3)
c. (1 1 1)
d. (2 3 4)

end alt

## Evaluacion perezosa

begin alt |d|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (define (plus1 n)
            (delay (+ 1 n) ))

    (define prom1 (plus1 1))
    (define prom2 (plus1 -1))
Que se vera en pantalla cuando se llame:
    (display prom1)
    (display prom2)
a. 2 0
b. 2 1
c. #<promise:plus1>
d. #<promise:plus1>#<promise:plus1>

end alt
begin alt |a|

(Ejercicios de clases Wladimir 2024-2)
Considere el siguiente codigo en Scheme:
    (define (plus1 n)
            (delay (+ 1 n) ))

    (define prom1 (plus1 1))
    (define prom2 (plus1 -1))
Que se vera en pantalla cuando se llame:
    (force prom1)
    (force prom2)
a. 2 0
b. 2 1
c. #<promise:plus1>
d. #<promise:plus1>#<promise:plus1>

end alt

## Otras preguntas no inplicitas en los archivos del profesor

begin alt |d| Considera que (pair? '()) dara #f, mientras que (list '()) dara #t

Con respecto a pair?, se puede decir que...
a. Recibe una lista y devuelve #t si esta contiene un numero par de elementos contenidos en ella
b. (pair? (cons 1 2)) dara #f ya que no se le especifico con que elemento termina la lista
c. Como las listas estan hechas de pares, entregarle argumentos como '(a b c) y '() dara #t, ya que son listas y por tanto, contienen pares
d. pair? no es equivalente a list? debido a que hay casos donde algo es una lista pero no es par

end alt
begin alt |b|

Con respecto al siguiente codigo en Scheme:
    (cdr '(a b)) ; Linea1
    (cdr '(b)) ; Linea2
    (cdr '(a . b)) ; Linea3
Que sera lo que se imprimira cuando se ande el codigo? Cosnidere el orden Linea1 / Linea2 / Linea3
a. (b) | b | ()
b. (b) | () | b
c. (b) | (b) | b
d. (b) | () | (b)

end alt
begin alt |x|

Con respecto a los comparadores (eq?, eqv? y equal?), es cierto decir que...
    I. El mas restrictivo de los 3 es equal?
    II. eq? compara si dos objetos comparten memoria (y por tanto son identicos)
    III. (eqv? "a" "a") y (eqv? 2 2) retornaran #t
    IV. equal? es el unico que permite comparar dos listas de manera correcta
a. Solo II
b. II y III
c. II y IV
d. III y IV
e. Todas las anteriores

end alt
begin alt |c|

Si consideramos las siguientes lineas de codigo en Scheme:
    (define lista '(1 2 3)) ; Linea1
    (append lista '(4 5)) ; Linea2
    (display lista) ; Linea3
Que ocurre en la ejecucion del codigo?
a. Ocurre un error en la linea2, puesto que append no puede modificar un define
b. La linea3 mostrara por pantalla (1 2 3 4 5)
c. La linea3 mostrara por pantalla (1 2 3)
d. Ocurre un error en la linea2, puesto que necesita tener un set! para funcionar

end alt
