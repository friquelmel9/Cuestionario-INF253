### figura verdadero/falso

begin figura1:

(define (f1 a)
    (f1 (+ a (random)) )
)

(define (f2 a)
    (+ a (f2 (random)) )
)

(define contador 0)

(define cuenta
    (lambda ()
        (set! contador (+ contador 1))
        contador
    )
)
(cuenta)

(letrec ((suma
        (lambda [ls]
        (if (null? ls)
        0
        (+ (car ls) suma (cdr ls)))
        )
        ))
    (suma '(1 2 3 4 5 6))
)
end fig
begin figura2:

(define (combinatoria n k)
	(cond ((or (= n k) (= k 0)) 1)
		(else (+ (combinatoria (- n 1) (- k 1))
			(combinatoria n (- k 1))))))

end fig
begin figura3:

(let ((square (lambda (x) (* x x))))
                    (list (square 2)
                          (square 3)
                          (square 4)
                    )
)

end fig
begin figura4:

(define (abs n) (if (> n 0)
        n
        (- 0 n)))

end fig
begin figura5:

(define length
 (lambda (ls)
        (if (null? ls)
            0
            (+ 1 (length (cdr ls))))))

end fig
begin figura6:

(define memv
 (lambda (x ls)
         (cond ((null? ls) ())
                ((eqv? x (car ls)) (cdr ls))
                (else (memv x (cdr ls))))))

end fig
begin figura7:

(define remv
 (lambda (x ls)
        (cond ((null? ls) â€˜())
            ((eqv? x (car ls)) (remv x (cdr ls)))
            (else (cons (car ls) (remv x (cdr ls)))))))

end fig
begin figura8:

(define factorial
 (lambda (n)
         (let fact ((i n))
                  (if (= i 0)
                             1
                             (* i (fact (- i 1)))))))

end fig
begin figura9:

(define factorial
 (lambda (n)
         (let fact ((i n) (a 1))
                  (if (= i 0)
                             a
                             (fact (- i 1) (* a i))))))

end fig