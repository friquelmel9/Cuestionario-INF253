# VerdaderoFalso 5.1: Tipos de Datos Abstractos (TDA)

En Java, todos los datos son asignados desde el Heap|V
En Java, todos los datos son asignados desde el Stack|F
En Java, todos los datos son accedidos mediante variables de referencia|V
En Java, los datos pueden ser accedidos tanto directamente como referenciado|F
A diferencia de Java, C++ no tiene ambito de paquete|V
En Python, todo metodo de un TDA debe poseer el argumento self|V
Python soporta TDA Parametrizado|F
Java soporta TDA Parametrizado|F
En Java, se pueden definir clases genericas, que almacenan sus propios metodos y variables|F
Ejemplos de clases genericas en Java son LinkedList y ArrayList|V
Ejemplos de clase genericas en Java son LinkedList y API|F
Stack es un tipo de dato abstracto|V

# VerdaderoFalso 5.2: Orientacion a Objetos (OO)

La POO consiste de TDA, Herencia y Polimorfismo|V
Ejemplos de lenguajes con OO puros son Smalltalk y Ruby|V
Ejemplos de lenguajes con OO puros son ADA y C++|F
Ejemplos de lenguajes con extensiones para POO son ADA y C++|V
Ejemplos de lenguajes con extensiones para POO son ADA y C#|F
Ejemplos de lenguajes POO pero poseen estructura imperativa son Java y C#|V
Ejemplos de lenguajes POO pero poseen estructura imperativa son Java y C++|F
Ejemplos de lenguajes POO pero poseen estructura imperativa son Java y C|F
Ejemplos de lenguajes que soporta POO son CLOSS|V
En Java, un objeto corresponde a la instancia concreta de una clase|V
Programa se define como conjunto de objectos interactuantes|V
Clase se define como declaracion de un tipo, que especifica su estado y comportamiento para las instancias de este|V
En modelo Objetual, el tipo quedara definido por la interfaz de la clase|V
En modelo Objetual, la implementacion del tipo queda especificado segun el codigo de sus metodos|V
En modelo Objetual, un mensaje corresponde a la invocacion del metodo que contiene su identificador, el metodo al que va, y sus parametros|V
En modelo Objetual, un mensaje corresponde a la implementacion de un metodo|F

# VerdaderoFalso 5.3: Clases y Objetos (En Java)

En Java, las clases contienen los metodos que definen la computacion|V
En Java, los campos son lo mismo que variables miembro|X
En Java, los campos o variables miembros definen el estado del objeto|V
En Java, los campos o variables miembros definen el estado de la clase|F
En Java, la implementacion define la semantica de un metodo|V
En Java, la firma define la semantica de un metodo|F
En Java, la creacion de un objeto tiene sus propias instancias de cada variable miembro definida|F
En Java, se puede compartir las variables miembros entre objetos de una clase con el modificador static|V
En Java, se puede compartir las variables miembros entre objetos de una clase con el modificador public|F
Un metodo de control de acceso para un miembro es private, solo permite acceder a esta en la propia clase|V
Un metodo de control de acceso para un miembro es private, genera que no se pueda cambiar el miembro en la clase|F
Un metodo de control de acceso para un miembro es package, permite acceder a miembros sin modificador de acceso para todo codigo del paquete|V
Un metodo de control de acceso para un miembro es package, permite juntar clases entre si|F
Un metodo de control de acceso para un miembro es protected, permite acceso a subclases o codigo del mismo paquete|V
Un metodo de control de acceso para un miembro es protected, permite el acceso unicamente a las subclases|F
Un metodo de control de acceso para un miembro es public, que permite acceso para cualquier clase|V
La declaracion de una variable en Java no crea el objeto, si no un puntero null|V
La declaracion de una variable en Java no crea el objeto, si no una instancia de este|F
La declaracion de una variable en Java crea el objeto, inicialmente null|F
Para inicializar el objeto, es necesario usar el operador new en Java|V
El operador new hace que runtime cree un objeto para luego retornar una referencia a este|V
El operador new hace que runtime cree un objeto para luego retornarlo|F
Los constructores han de inicializar las variables miembro de una clase|X
Los constructores poseen el mismo nombre de la clase y pueden no recibir parametros|V
Los constructores poseen el mismo nombre de la clase y pueden recibir parametros|V
Para tener varios constructores es necesario tener como minimo un constructor sin parametros|X
Para tener varios constructores, es necesario definir uno como default|F
Los constructores son un metodo de la clase que permite inicializarla|F
Una clase puede tener mas de un constructor|V
Una clase debe tener, a lo mas, un constructor|F
Un metodo de control de acceso para constructores es private, el cual puede solo ser instaciado por su propia clase|V
Un metodo de control de acceso para constructores es private, el cual puede solo ser instaciado por su propia clase o subclases|F
Un metodo de control de acceso para constructores es protected, el cual puede ser instaciado por la propia clase, subclases o clases del paquete|V
Un metodo de control de acceso para constructores es protected, el cual puede solo ser instaciado por su propia clase|F
Un metodo de control de acceso para constructores es public, el cual permite que cualquier clase pueda crear una instancia del objeto|V
Si un constructor no se le especifica control de acceso, podra ser instanciado solo por su misma clase o clases compartidas del paquete|V
Si un constructor no se le especifica control de acceso, podra ser instanciado por cualquier clase|F
Si no se define un constructor para una clase, esta no podra ser inicializada|X
Si no se define un constructor para una clase, se utiliza un constructor por defecto que no hace nada|V
Si no se define un constructor para una clase, se utiliza un constructor por defecto que deja toda variable miembro como null|F
Si no se define un constructor para una clase, este sera publico siempre que la clase tambien lo sea|V
Si no se define un constructor para una clase, este sera publico siempre|F
Un metodo consiste en la accion de manipular el estado del Objeto, tal como sus variables miembro|V
Para llamar a un metodo, debe ser refenciado como objeto.metodo(args), siendo objeto una variable que referencia a un objeto|V
En Java, cualquier parametro es pasado por valor, pese a que sea una referencia previamente|V
En Java, cualquier parametro es pasado por referencia, pese a que sea un valor previamente|F
En Java, si el parametro recibido es una referencia, se copia la referencia, no el objeto|V
En Java, si el parametro recibido es una referencia, se copia el objeto, no la referencia|F
En Java, si el parametro recibido es una referencia, hara el cambio tras el retorno|V
En Java, si el parametro recibido es una referencia, hara el cambio directamente durante su ejecucion|F
Un metodo de control de acceso para metodos es private, utilizado para proteger campos de acceso externo|V
En Java, se conocen como getters o accesor, aquel metodo que haga una lectura indirecta de una variable miembro de la clase|V
En Java, se conocen como getters o accesor, cuando se toma una lectura directa de una variable miembro de una clase|F
En Java, se conocen como setters aquel metodo que permite hacer un cambio al valor de una variable miembro de una clase|V
La firma de un metodo consiste unicamente en el nombre, cantidad y tipos de parametros, y el tipo de retorno|V
La firma de un metodo consiste unicamente en la cantidad y tipos de parametros|F
La firma de un metodo consiste unicamente los tipos de parametros|F
La sobrecarga de un metodo ocurre cuando se tienen varios metodos con el mismo nombre pero distintos parametros|V
La sobrecarga de un metodo ocurre cuando se tienen varios metodos con el mismo nombre pero distinta firma|F
La sobrecarga de un metodo ocurre cuando se tienen varios metodos con el mismo firma pero distinto parametros|F
Para invocar un metodo sobrecargado, se decide mediante calzar la cantidad y tipo de los parametros que use|V
Para invocar un metodo sobrecargado, se decide mediante la sintaxis metodo.metodotipo|F
La referencia this corresponde a la referencia sobre el objeto actual en un metodo no estatico|V
La referencia this corresponde a la refencia sobre el objeto actual en cualquier metodo|F
La referencia this es usada cuando existe ocultamiento por colision de nombres|F
En caso de querer acceder a miembros ocultos de una superclase, se debe usar el prefijo super|V
Un miembro static corresponde a aquel que es compartido por todos los objetos de una clase|V
Un miembro static corresponde a aquel que es compartido por todas las clases|X
Una variable miembro static corresponde a una variable compartida por todos los objetos de una clase|V
Un metodo static corresponde a aquel que puede ser invocado por toda la clase, y que permite acceder unicamente a los miembros estaticos|V
Un metodo static corresponde a aquel que puede ser invocado por toda la clase, y que permite acceder a los miembros de esta|F
Para inicializar variables miembros static, se puede utilizar un bloque de inicializacion static{...}|V
Para inicializar variables miembros static, se puede utilizar un bloque de inicializacion static(...)|F
Para inicializar variables miembros static, se puede utilizar una funcion de inicializacion static(...)|F
Una clase anidada corresponde a una clase definida como miembro de otra clase|V
Una clase anidada es util para cuando solo es necesaria en el contexto de una clase|V
Una clase anidada posee acceso a todo miembro de la clase en la que pertence|V
Una clase anidada posee acceso solo a los miembros propios de su clase|F
Una clase anidada posee acceso a todo miembro de la clase menos private|F
Una clase anidada no estatica se conoce como clase interna|V
Una clase anidada estatica se conoce como clase interna|F
Se puede crear clases anidadas static|V
Una clase anidada static tiene acceso a miembros no static|F
Una clase anidada static permite relacionar clases|V
Una clase anidada static permite relacionar instancias|F
Una clase interna permite definir miembros static|F
Una clase interna permite relacionar clases|X
Una clase interna permite relacionar instancias|V
A diferencia de C++, En Java no nos encargamos de explicitar la liberacion de memoria de un objeto|V
A igual que C++, En Java nos encargamos de explicitar la liberacion de memoria de un objeto|F
A igual que C++, En Java podemos utilizar el new|V
A igual que C++, En Java podemos utilizar el delete|F
En Java, si un objeto no se referencia, el sistema se encargara de liberar la memoria relacionada con ese objeto|V
En Java, debido a la naturaleza del recolector de basura, generara problemas de dangling|F
En Java, debido a la naturaleza del recolector de basura, no se requerira administrar la memoria para liberar|V
El metodo finalize consiste finalizar algo antes de liberar su memoria|V
El metodo finalize es util para evitar fuga de recursos, tales como archivos abiertos|V
El metodo main debe existir para toda aplicacion de Java|V
Se pueden crear varios metodos main en post de las necesidades de una aplicacion en Java|F
El metodo main en Java es public, static y retorna void|V
El metodo main en Java es public, static y retorna int|F
El metodo main en Java es public y retorna int|F

# VerdaderoFalso 5.4: Herencia y Polimorfismos

La herencia consiste en la reutilizacion de tipos de clases previamente definidos o existentes|V
La herencia define una jerarquia de relaciones, en donde la definicion deriva de la base|V
La herencia define una jerarquia de relaciones, en donde la derivacion puede provenir de multiples bases|F
Se conocen como subtipo o subclase la derivacion, mientras que de donde provenga se le llamara supertipo o superclase|V
Se conoce como una clase extendida aquella que hereda de otra clase, extendiendo el contrato|V
Se conoce como una clase extendida aquella que hereda de otra clase, creando un nuevo contrato con la funcionalidad del anterior|F
Se conoce como una clase extendida aquella que hereda de otra clase, util para agrega funcionalidades|V
Mientras se respete el contrato de una superclase, se puede cambiar la implementacion de metodos heredados|V
Se puede cambiar a decision propia la implementacion de metodos heredados de una superclase|F
Una clase abstracta define un comportamiento generico que al ser heredado debe implementarse|V
Si B es una subclase de A, es corrector decir que: \nA refA = new A(...)|V
Si B es una subclase de A, es corrector decir que: \nA refA = new B(...)|V
Si B es una subclase de A, es corrector decir que: \nB refB = new A(...)|F
Si B es una subclase de A, entonces B sera tipo de la superclase|V
Si B es una subclase de A, entonces A sera tipo de la subclase|F
Si Pixel es una subclase de Punto, entonces Pixel es un Punto|V
Si Pixel es una subclase de Punto, entonces Punto es un Pixel|F
En Java, todas las clases son extendidas, ya sea explicitamente o indirectamente|V
En Java, las clases solamente son extendidas cuando se le expecifica extends |F
En Java, todas las clases derivan directamente o indirectamente de la clase Object|V
En Java, la clase Object implementa el comportamiento de todo objeto en Java|V
En Java, se puede tener multiples herencias por clase|V
En Java, se puede tener multiples superclases para una clase|F
En Java, se le llama herencia simple al comportamiento de tener una unica superClase por clase|V
En Java, las subclases heredan todos los miembros protected y public, independientemente si estan en el mismo paquete o no|V
En Java, las subclases heredan todos los miembros de cualquier acceso, independientemente si estan en el mismo paquete o no|F
En Java, las subclases heredan los miembros sin modificador siempre y cuando sea declarada en el mismo paquete que la superclase|V
En Java, la variable miembro de una superclase es ocultada por la subclase|X
En Java, si se declara un campo con el mismo nombre que un campo de la superclase, esta se oculta y ha de ser accedida mediante la referencia super|V
En Java, si se declara un campo con el mismo nombre que un campo de la superclase, esta se oculta y no puede ser accedida|F
En Java, si se declara un campo con el mismo nombre que un campo de la superclase, esta se borra|F
En Java, se considera como redefinicion el reemplazo de la implementacion de un metodo de superClase por una implementacion de subclase|V
En Java, si redifinimos un metodo, se podra acceder al original mediante la referencia super|V
En Java, si redifinimos un metodo, ya no se podra llamar al metodo de la superClase|F
En Java, un metodo redefinido puede usar cualquier modificador de acceso, siempre y cuando de el mismo o mas acceso que el original|V
En Java, un metodo redefinido puede usar cualquier modificador de acceso, independientemente del acceso del metodo original|F
En Java, un metodo static no se puede redefinir, mas si ocultar|V
En Java, los unicos metodos no redefinibles son aquellos finales o static|V
En Java, los unicos metodos no redefinibles son aquellos protected, finales o static|F
En las clases extendidas, se llama primero al constructor de la superClase sin argumentos y luego el de la subClase|V
En las clases extendidas, se llama primero al constructor de la superClase con los mismos parametros que el constructor de la subClase utilizado|F
En las clases extendidas, se puede acceder al constructor de una SuperClase mediante la referencia super|V
Clases o metodos abstractos han de ser implementados cuando se extienden a una subClase|V
La abstraccion es util para cuando se necesita un comportamiento comun pero que se implementa de distinta manera para las clases|V
Un metodo abstracto es aquel que no esta implementado y unicamente define el protocolo de los mensajes|V
Un metodo abstracto es aquel que no esta implementado y no define el protocolo de los mensajes|F
Una clase abstracta ha de tener, a lo menos, un metodo abstracto|V
Una clase abstracta ha de tener, a lo mas, un metodo abstracto|F
Una clase abstracta ha de tener todos sus metodos abstractos|F
Un poliformismo estatico corresponde a aquel que ha de ser explicitado y declarado previo a su utilizacion|V
Un poliformismo estatico corresponde a aquel que ha de ser unicamente declarado previo a su utilizacion|F
Ejemplos de poliformismo estatico son la sobrecarga de funciones o clases genericas|V
Ejemplos de poliformismo estatico son la sobrecarga de funciones y las clases abstractas|F
Un poliformismo dinamico es aquel que no incluye especificacion sobre los tipos de datos con que trabaja|V
Ejemplos de poliformismo dinamico son los metodos virtuales|V
Ejemplos de poliformismo dinamico son el ligado dinamico de metodos|V
El ligado dinamico de metodos consiste en aquel que permite referenciar objetos de cualquier tipo de descendiente|V
En ligado dinamico de metodos, cuando se invoca un metodo redefinido, se realiza dinamicamente el ligado correspondiente|V
Una superClase puede esconder entidades a su subClase|V
Una subClase puede esconder entidades a su superClase|F
Una superClase puede esconder entidades a clientes pero mostrarlas a sus subClases|V
El control de acceso private no permite acceso a clientes ni a subClases|V
El control de acceso private no permite acceso a clientes pero si a subClases|F
El control de acceso protected no permite acceso a clientes pero si a subClases|V
El control de acceso protected no permite acceso a clientes ni a subClases|F
El control de acceso public permite acceso tanto a clientes como subClases|V
Cuando una clase es abstracta, esta no puede ser instanciada|V
Cuando una clase es final, entonces no se puede derivar ni sus miembros como sus metodos|V
Cuando una clase es final, entonces no se puede derivar sus miembros a menos que no sean declarados como finales|F
Cuando un miembro es final, no se puede modificar su valor|X
En Java, se puede tener multiples superClases para una clase|F
En C++, se puede tener multiples superClases para una clase|V
Un problema de la herencia multiples es problemas de colision de nombres|V
En Java, toda clase tiene a Object como raiz|V
En Java, si a una clase extiende a otra, esta no tendra implementado Object|F
Los metodos de la clase Object son para utilidad generar y para soporte de threads|V
Algunos metodos de la clase Object son equals, clone y hashcode|V
Algunos metodos de la clase Object son getClass, finalize y toString|V
Algunos metodos de la clase Object son equals, finalize y getSize|F
Algunos metodos de la clase Object son getClass, extends y toString|F
El metodo equals de la clase Object compara si dos objetos tienen mismo valor|V
El metodo equals de la clase Object compara si dos objetos tienen la misma referencia|F
El metodo clone de la clase Object retorna un clon del objeto al que se llamo|V
El metodo clone de la clase Object retorna un puntero del objeto al que se llamo|F
Una clase que permite clonar objetos normalmente puede implementar la interfaz Cloneable en Java|V
El metodo hashCode retorna un codigo hash del objeto, unico para este|V
El metodo getClass retorna un objeto de tipo class del objeto que representa la clase del objeto this|V
El metodo getClass retorna la clase del objeto queque representa la clase del objeto this|F
El metodo finalize finaliza un objeto durante la recoleccion de basura|V
El metodo toString retorna la representacion del objeto en String|V

# VerdaderoFalso 5.5: Interfaces

Una interfaz permite definir el protocolo de comunicacion entre objetos sin necesidad de saber la clase que lo implementa|V
Una interfaz permite definir metodos entre objetos que funcionaran de la misma manera independientemente de la clase|F
Una interfaz permite definir metodos que podria tener o no la clase donde se implemento|F
Una interfaz obliga al programador a definir los metodos en la clase donde se implemento|V
Una clase puede implementar una o mas interfaces|V
Una clase ha de implementar una interfaz para toda clase|F
Una clase puede implementar, a lo mas, una interfaz|F
Una interfaz sirve para declarar tipos consistentes de metodos abstractos|V
Una interfaz sirve para declarar constantes para las clases|V
Una interfaz sirve para implementar un metodo compartido entre clases|F
Una utilizacion util de una interfaz son para la definicion de API|V
Una interfaz fuerza una relacion entre las clases|F
Una interfaz declara metodos que han de implementarse, mas no el como|V
Las constantes de una interfaz son public, static y final|V
Las constantes de una interfaz son public y final|F
Los metodos de una interfaz son public y abstract|V
Los metodos de una interfaz son abstract, mas su metodo de acceso puede ser public o protected|F
Los modificadores tales como private o protected no son aceptados por la Interfaz|V
Los modificadores tales como public y protected son aceptados por la Interfaz|F
Una interfaz puede extender otras interfaces|V
Una interfaz no puede extender otras interfaces|F
En Java, la diferencia entre una interfaz y una clase abstracta es que la primera permite crear metodos no abstractos|F
En Java, la diferencia entre una interfaz y una clase abstracta es que la segunda permite crear metodos no abstractos|V
En Java, la diferencia entre una interfaz y una clase abstracta es que la primera puede ser parte de una jerarquia de clases|F
En Java, la diferencia entre una interfaz y una clase abstracta es que la segunda puede ser parte de una jerarquia de clases|V
En Java, la diferencia entre una interfaz y una clase abstracta es que la primera se puede tener varias interfaces, mas no varias superClases|V
Existe Principio de Sustitucion en interfaces|V
Si existe un mismo nombre en mas de una interfaz de los superTipo, habra sobrecarga siempre y cuando sus firmas no sean identicas|V
Si existe un mismo nombre en mas de una interfaz de los superTipo, habra varios metodos que compartan la firma|F
Si existe un mismo nombre en mas de una interfaz de los superTipo, habra unicamente un metodo con la misma firma|V
Si existe un mismo nombre en mas de una interfaz de los superTipo, habra sobrecarga siempre y cuando sus retornos sean distintos|F

# VerdaderoFalso 5.6: Manejo de Excepciones

Una excepcion ocurre cuando un evento interrumpe la ejecucion|V
Una excepcion ocurre cuando un evento termina el programa|F
Una excepcion cuando ocurre creara un objeto cuya referencia sera utilizada para manejar esta excepcion|V
Una excepcion cuando ocurre cerrara el programa si no encuentra un metodo en el stack que maneje la excepcion|V
Una excepcion es manejada mediante el Stack|F
Una excepcion es manejada mediante el runtime|V
Ventajas de entregan el manejo de excepciones son codigo mas legible, permite el manejo de errores y diferenciarlos, entre otros|V
Las excepciones se derivan de la clase Object|F
Las excepciones se derivan de la clase Throwable|V
La clase Throwable tiene dos subclases, Error y Exception|V
La subclase Error de Throwable representa a un error interno de Java, tal como agotamiento de recursos del runtime|V
La subclase Error de Throwable representa a un error del programa|F
La subclase Excepcion de Throwable representa a un error interno de Java, tal como agotamiento de recursos del runtime|F
La subclase Excepcion de Throwable representa a un error del programa|V
La subclase Excepcion de Throwable posee dos subclases, IOException y RuntimeException|V
La subclase Error de Throwable posee dos subclases, IOError y RunTimeError|F
Si ocurre una RuntimeException, es porque el programador ha hecho algo mal|V
Si ocurre una IOException, es porque el programador a hecho algo mal|F
RuntimeException corresponde a errores de programacion, tales como mal uso de cast, acceder a un index fuera del rango o acceder a una referencia nula|V
RuntimeException corresponde a errores de externos, tales como leer mas alla del final de un archivo o abrir una URL mal escrita|F
IOException corresponde a errores de programacion, tales como mal uso de cast, acceder a un index fuera del rango o acceder a una referencia nula|F
IOException corresponde a errores de externos, tales como leer mas alla del final de un archivo o abrir una URL mal escrita|V
Se pueden crear nuevas clases de expeciones derivando unicamente IOException|F
Se pueden crear nuevas clases de expeciones derivando unicamente RuntimeException|F
La sentencia try permite definir un manejador de excepciones mediante un bloque de sentencias|V
La para clase de excepcion a buscar, se define un catch que buscara el tipo de error especificado|V
Si un codigo lanza una excepcion, se detiene el metodo y se llama a la limpieza|F
Si un codigo lanza una excepcion, es necesario implementar un codigo de limpieza|V
Una clausula finally se ejecuta haya o no ocurrido una excepcion|V
Una clausula finally se ejecuta unicamente ocurrida una excepcion|F

# VerdaderoFalso 5.7: Paquetes

Un paquete es aquel que contiene clases, interfaces o otros subpaquetes que estan relacionados|V
Un paquete permite agrupar interfaces y relacionar clases|F
Un paquete permite agrupar interfaces y clases relacionadas|V
Para definir un paquete, se ha de escribir package <nombre>; en la primera linea de codigo|V
Para definir un paquete, se ha de escribir package <nombre>; previo a la clase, sin importar la linea|F
Para importar una clase de un paquete, se ha de escribir import <nombre>.<clase>|V
Para importa todas las clases de un paquete, se ha de escribir import <nombre> previo al codigo de la clase|F
Cuando se importa un paquete mediante import Paquete.*, es necesario anteponer el nombre del paquete previo a la clase importada|F
En un paquete, clases e Interfaces puede ser tanto publicas como privadas respecto al paquete|V
Si en un paquete no se declara el tipo de acceso, se asumira public|F
Si en un paquete no se declara el tipo de acceso, se asumira restringido solo al paquete|V
Todo tipo de miembros son accesible por cualquier codigo del paquete|F
Todo tipo de miembros menos el private son accesibles por cualquier codigo perteneciente al paquete|V
Todo tipo de miembros menos el private y protected son accesibles por cualquier codigo perteneciente al paquete|F
Los paquetes se pueden anidar, generando asi control de acceso distintos dependiendo de su estructura|F
los paquetes se pueden anidar, generalmente relacionandose con su estructura del directorio|V
Ejemplos de paquete en Java son java.lang, java.io y java.util|V
Ejemplos de paquete en Java son java.math, java.awt y java.net|V
Ejemplos de paquete en Java son java.beans, javax.crypto y javax.print|V
Ejemplos de paquete en Java son javax.swing, javax.accesibility y java.sql|V
Ejemplos de paquete en Java son java.swing, java.accesibility y java.sql|F
Ejemplos de paquete en Java son java.beans, java.crypto y java.print|F

# VerdaderoFalso 5.8: Provenientes de quices antiguos:

(Compilacion Quices - Marti quiz3p1) Ejemplos de polimorfismo son la sobrecarga de metodos y los tipos parametrizados|V
(Compilacion Quices - Marti quiz3p2) Una clase con el modificador final no puede ser instanciada|F
(Compilacion Quices - Marti quiz3p3) Con el metodo de recoleccion de basura de Java se reduce el problema de dangling|F
(Compilacion Quices - Marti quiz3p4) Como en Java los parametros se pasan por valor, si el parametro fuese una referencia, es esta misma la que se copia, no el objeto asociado|V
(Compilacion Quices - Marti quiz3p5) Una interfaz es util para definir una API, sin dar indicios de las clases que le daran implementacion|V
(Compilacion Quices - Marti quiz3p6) Una interfaz permite capturar las diferencias entre clases que estan relacionadas entre si|F
(Compilacion Quices - Marti quiz3p7) En la invocacion de un metodo que ha sido redifinido, el ligado al metodo se hara dinamicamente|V
(Compilacion Quices - Marti quiz3p8) finalize permite contar con un codigo para la liberacion de recursos, al momento de lanzarse una excepcion|F
(Compilacion Quices - Marti quiz3p9) La redefinición de métodos dentro de una jerarquía de herencia da la posibilidad de que la superclase pueda saber todos los usos que se le darán en las subclases|F
(Compilacion Quices - Marti quiz3p10) Java permite que los métodos tengan una cantidad variable de argumentos, al igual que C++|F
(Compilacion Quices - Marti quiz3p11) Tanto Smalltalk como Ruby son lenguajes de programacion orientados al objeto puros|V
(Compilacion Quices - Marti quiz3p12) La referencia this hace alusion al objeto sobre el que se invoco el metodo|V
(Compilacion Quices - Marti quiz3p13) Cuando se declara una variable, se crea un objeto que toma a null como valor inicial|F
(Compilacion Quices - Marti quiz3p14) Si ocurre una excepción del tipo IOException es debido a que el programador ha hecho algo mal|F
(Compilacion Quices - Marti quiz3p15) En el control de acceso asociado a la herencia, una clase podría ocultar entidades a sus clientes y/o superclase.|F
(Compilacion Quices - Marti quiz3p16) La herencia favorece la reutilización de clases que ya existen, permitiendo que desde éstas se puedan definir otras clases con las que se relacionan|V
(Compilacion Quices - Marti quiz3p17) En el caso de que no existiera la herencia y que los objetos se comporten como un tipo abstracto de datos, se podría usar tanto la memoria stack como la de heap para crear objetos|V
(Compilacion Quices - Marti quiz3p18) Una clase puede extender varias interfaces, pero sólo implementar una única superclase|F
(Compilacion Quices - Marti quiz3p19) En el modelo objetual, la implementación del tipo asociado a una clase se especifica tanto por las variables como por su interfaz, donde esta última considera métodos y constantes|F
(Compilacion Quices - Marti quiz3p20) Un método abstracto es uno que solamente tiene definido el protocolo de los mensajes|V

(Certamen 1 - Marti p4) Con respecto a la redefinicion de metodos en la herencia, un metodo no se puede ocultar en una subclase|F
(Certamen 1 - Marti p5) Las referencias a una clase hija pueden apuntar a objetos de su clase padre, pero no al reves|F
(Certamen 1 - Marti p9) Un ejemplo de polimorfismo dinámico son los subprogramas genéricos, donde éstos utilizan un mismo código (comportamiento) para distintos tipos de parámetros|V
(Certamen 1 - Marti p19) Una de las desventajas de la declaración implícita de los tipos de datos, es que hace más lenta la ejecución debido a la verificación dinámica de éstos|V
(Certamen 1 - Marti p20) C es un lenguaje imperativo, que permite elementos de la programación orientada al objeto|F
(Certamen 1 - Marti p25) Java es un lenguaje orientado al objeto, con ciertos elementos propios de un lenguaje imperativo|V
(Certamen 1 - Marti p29) En Java para poder acceder a las variables de clase que son definidas mediante la palabra static, no es necesario instanciar las clases|V
(Certamen 1 - Marti p35) Un ejemplo de polimorfismo estático es la sobrecarga de operadores. donde un operador tiene exactamente el mismo comportamiento, sin importar los tipos de datos de sus operandos|F

(Control 3 2022 - Gabriel Carmona p1) El concepto objeto y clase son lo mismo|F
(Control 3 2022 - Gabriel Carmona p2) En Java, los objetos son asignados desde el heap y accedidos mediante variables de referencia|V
(Control 3 2022 - Gabriel Carmona p3) El recolector de basura de Java evita que se produzcan los dangling en la memoria|V
(Control 3 2022 - Gabriel Carmona p4) Las variables miembros de un objeto en Java definen su estado|V
(Control 3 2022 - Gabriel Carmona p5) Un constructor en Java es un tipo especial de metodo, que retorna una referencia a un objeto de la clase invocada|F
(Control 3 2022 - Gabriel Carmona p6) En Java, el acceso protegido es mas restrictivo que el de paquete|F
(Control 3 2022 - Gabriel Carmona p7) En Java y C++, las clases funcionan exactamente igual|F
(Control 3 2022 - Gabriel Carmona p8) Una clase abstracta solo puede tener metodos abstractos|F
(Control 3 2022 - Gabriel Carmona p9) Si estoy dentro de un metodo y hago acceso a la referencia this corresponde a la instancia a la que llamo a un metodo|V
(Control 3 2022 - Gabriel Carmona p10) En Java, el programa main es lo unico que puede no ser una clase|F

(Quiz 3 2022 CC - Jose Luis Marti p1) Un tipo de dato abstracto es un tipo de datos que satisface las restricciones de reusabilidad y seguridad|F
(Quiz 3 2022 CC - Jose Luis Marti p2) Python provee soporte para la definicion de clases y Objetos|V
(Quiz 3 2022 CC - Jose Luis Marti p3) En la orientacion a objetos, una clase generica corresponde a lo que se llama tipo de datos abstraacto parametrizado en un lenguaje no objetual|V
(Quiz 3 2022 CC - Jose Luis Marti p4) Java es un lenguaje de programacion que soporta tanto la programacion imperativa como la orientada a objeto|F
(Quiz 3 2022 CC - Jose Luis Marti p5) En Java, los objetos son asignados desde el heap y accedidos mediante variables de referencia|V
(Quiz 3 2022 CC - Jose Luis Marti p6) Las variables miembros de un objeto en Java definen su estado|V
(Quiz 3 2022 CC - Jose Luis Marti p7) En Java, el acceso protegido es mas restrictivo que el del paquete|F
(Quiz 3 2022 CC - Jose Luis Marti p8) Un constructor en Java es un tipo especial de metodo, que retorna una referencia a un objeto de la clase invocada|F
(Quiz 3 2022 CC - Jose Luis Marti p9) Si dentro de un metodo se hace uso de la referencia this, esta correponde a la instancia que invoco a dicho metodo|V
(Quiz 3 2022 CC - Jose Luis Marti p10) El recolector de basura de Java evita que se produzcan los dangling en memoria|V

(Quiz 3 2022 SJ - Roberto Diaz p1) En Java no se produce dangling y nunca habra basura en memoria|F
(Quiz 3 2022 SJ - Roberto Diaz p2) C soporta directamente el concepto de clausura pues existen los punteros a funcion|F
(Quiz 3 2022 SJ - Roberto Diaz p3) En Java, al pasar un objeto a un metodo, el parametro es una copia de la referencia al objeto|V
(Quiz 3 2022 SJ - Roberto Diaz p4) Una instancia de herencia multiple es cuando una clase tiene varias subclases|F
(Quiz 3 2022 SJ - Roberto Diaz p5) Un metodo con los modificadores final o static no podran ser redefinidos|V
(Quiz 3 2022 SJ - Roberto Diaz p6) Java solamente soporta polimorfismo dinamico, pero no polimorfismo estatico|F
(Quiz 3 2022 SJ - Roberto Diaz p7) En Java, una referencia sera nula solo cuando se indique explicitamente asignando null a la variable|F
(Quiz 3 2022 SJ - Roberto Diaz p8) Una clase abstracta puede contener metodos no abstractos|V
(Quiz 3 2022 SJ - Roberto Diaz p9) Cualquier lenguaje con soporte de TDA sera inherentemente Orientado a Objeto|F
(Quiz 3 2022 SJ - Roberto Diaz p10) Al importar las clases de un paquete con un asterisco (i.e. paquete.*) no se importaran las clases en sus subpaquetes|V
